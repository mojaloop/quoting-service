version: "3.7"
services:
  central-ledger:
    image: mojaloop/central-ledger
    container_name: qs_central-ledger
    links:
      - mysql
      - kafka
    ports:
      - "3001:3001"
    volumes:
       - ./docker/central-ledger/default.json:/opt/app/config/default.json
    environment:
      - CLEDG_DATABASE_URI=mysql://central_ledger:password@mysql:3306/central_ledger
      - CLEDG_SIDECAR__DISABLED=true

  ml-api-adapter:
    image: mojaloop/ml-api-adapter:latest
    container_name: qs_ml-api-adapter
    links:
      - kafka
      - central-ledger
      - mockserver
    ports:
      - "3000:3000"
    volumes:
      # override the default values with our own - this is because the KAFKA_HOST env variable is ignored for some reason
      - ./docker/ml-api-adapter/default.json:/opt/app/config/default.json

    # TODO: we should be able to remove this - I think the image command is broken
    command:
      - "node"
      - "src/api/index.js"

  mysql:
    image: mysql/mysql-server
    container_name: qs_mysql
    ports:
      - "3306:3306"
    volumes:
      #this fixes the permissions issue, but docker-compose up will fail on first attempt
      - ./docker/sql-init/:/docker-entrypoint-initdb.d/
    environment:
      - MYSQL_USER=${DBUSER:-central_ledger}
      - MYSQL_PASSWORD=${DBPASS:-password}
      - MYSQL_DATABASE=${DBUSER:-central_ledger}
      - MYSQL_ALLOW_EMPTY_PASSWORD=true

  mockserver:
    image: jamesdbloom/mockserver
    container_name: qs_mockserver
    ports:
      - "1080:1080"

  temp_curl:
    image: byrnedo/alpine-curl
    container_name: qs_temp-curl
    links:
      - mockserver
    volumes:
      - ./docker/wait-for-mockserver.sh:/opt/wait-for-mockserver.sh
    entrypoint: [ "sh", "-c" ]
    command:
      - /opt/wait-for-mockserver.sh
    environment:
      - MOCK_HOST=mockserver

  kafka:
    image: docker.io/bitnami/kafka:3.5
    container_name: cl_kafka
    ports:
      - "9092:9092"
    environment:
      # BITNAMI_DEBUG: "yes"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_CFG_LISTENERS: CONTROLLER://:9093,LISTENER_DOCKER://:29092,LISTENER_EXTERN://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: LISTENER_DOCKER://kafka:29092,LISTENER_EXTERN://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,LISTENER_DOCKER:PLAINTEXT,LISTENER_EXTERN:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_MESSAGE_MAX_BYTES: 200000000
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@127.0.0.1:9093
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ENABLE_KRAFT: "true"
    healthcheck:
      test: ["CMD" ,"/opt/bitnami/kafka/bin/kafka-broker-api-versions.sh","--bootstrap-server","kafka:29092"]
      timeout: 20s
      retries: 10
      start_period: 40s
      interval: 30s

  init-kafka:
    container_name: cl_init_kafka
    image: docker.io/bitnami/kafka:3.5
    depends_on:
      - kafka
    volumes:
      - ./docker/kafka/scripts:/tmp/kafka/scripts
    command: bash /tmp/kafka/scripts/provision.sh
